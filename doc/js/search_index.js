var search_data = {"index":{"searchIndex":["aproposui","accueilui","asset","assets","cell","cellassets","cellmove","cellui","chronoui","chronometre","classementui","classement_gen","click","cluelabel","clueui","game","gamebutton","generator","grid","gridui","gtk","guess","guessmove","joueur_score","magick","pixel","menuassets","menuitemui","menuui","mode","move","moves","object","observable","observator","options","optionsui","picture","playscreen","preview","randompic","rankedmode","sauvegardeui","sauvegardes","save","selectionui","solver","axe","axes","block","blocks","boundblock","cell","firstblock","lastblock","setqueue","solution","solver","strategieunify","strategieunifyanyblack","strategieunifyanycross","strategieunifymax","terminal","terminalinput","timetrialmode","tutorialmode","widget","<=>()","clues()","add()","add()","addall()","addaxe()","addnomoretimeobs()","addobservator()","addwinobservator()","add_seconds()","affichecomplet()","afficherindices()","ajoutable?()","ajoutejoueur()","applyasset()","applyasset()","applyguess()","applyon()","beuniqify()","begindrag()","beginguess()","biggestaxe()","bubbletobegin()","bubbletobegin()","bubbletoend()","bubbletoend()","calcindice()","calcindice()","cancelhypothesis()","cellat()","cellat()","cellat()","cell_asset()","cell_asset_frozen()","cell_asset_selected()","cellsfromfirsttoend()","changebackground()","changebackground()","changetoclue()","changetosum()","chargerrepertoire()","clear()","cleargame()","clearhypothesis()","clearredo()","clearselection()","clickdefined?()","clicked()","clueat()","clues()","colat()","colsolved?()","compact()","compact()","compact()","copyfrozen()","corecell()","corecellat()","creer()","creer()","delimg()","delete()","deserealisejoueurs()","deserelisejoueurs()","display()","display4ui()","donnemode()","donnenom()","donnenom()","donnescore()","draged()","draged?()","frozen?()","frozenof()","gap()","gaps()","gaps()","gaps()","gaps()","generategrid()","get()","getagrid()","getblocksranges()","getgoodblockscol()","getgoodblocksrow()","getimg()","getindex()","getinfos()","getinstance()","getinstance()","getinstance()","getsolvercellcol()","getsolvercellcol()","getsolvercellrow()","getsolvercellrow()","getsolvercol()","getsolverrow()","getstate()","getstate()","getstate()","getstate()","getsureindex()","getsureindexhuman()","getindicescolonne()","getindicesligne()","glow()","glow?()","glow_all()","gostate1()","gostate2()","gostate3()","goodblocks()","grade()","gridafficher()","groupeindicesgrid()","groupeindicesligne()","hide()","hide()","highlight()","highlightandgivetechniq()","hover()","in()","initcount()","initfrompic()","initfrompic()","initfrompic()","initfromsave()","initfromsave()","initfromsave()","initgamemodesmenu()","initgtkeventbox()","initgtkgrid()","initgtkobject()","initgtkobject()","initgtkobject()","initgtkobject()","initgtkwindow()","initmainmenu()","initmenus()","initlevelsmenu()","instance()","intersection()","intersections()","intersections()","intersections()","intersections()","isblack?()","item_asset()","item_asset_selected()","known?()","leftclicked()","leftclicked_draged()","lignestr()","littlegapsinrange()","load()","load()","minmaxpossiblesize()","moved?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","next()","normal()","normal()","notifynomoretime()","notifyobservators()","notifywin()","onconfigureeventsignal()","ondrawsignal()","on_changed()","out()","packbegin()","packbegin()","packbeginnotrec()","packend()","packend()","packendnotrec()","pathtocell()","pathtoselectedcell()","pause()","pause()","paused?()","penality()","prev=()","primarychange()","printindice()","printindice()","queuesize()","randgenerator()","raz()","reallast()","redo()","redo()","removechild()","removeguess()","removeobservator()","remplacedernier()","replay()","replay()","replay()","replaywithoutadd()","rightclicked()","rightclicked_draged()","root?()","rowat()","rowsolved?()","run()","run()","samestate?()","secondarychange()","select()","selection()","selectionneurmode()","selectn()","serialize()","setcluehighlightcolor()","setcolor()","sethelpcolor()","setlanguage()","setnbgrids()","setonclickevent()","setonclickevent()","setresolution()","setup_tree_view()","setup_tree_view()","show()","show()","show()","show()","show()","show()","show()","showgrid()","showtechniq()","show_all()","showingclues()","size()","size()","slidefrombegin()","slidefrombegin()","slidefromend()","slidefromend()","solvable?()","solve()","solve()","solve()","solved?()","solved?()","solved?()","solver_gaps()","solver_intersections()","solver_littlegapsinrange()","solver_minmaxpossiblesize()","start()","start()","start()","startinfo()","startinfohuman()","state=()","stop()","submit()","sumat()","supprimer()","swap()","toboolean()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_solvercell()","undo()","undo()","uniqify()","unpause()","unpause()","unselect()","update()","update()","update()","update()","updateall()","updateglowingclue()","updateglowingclue()","win?()","write()","readme","output"],"longSearchIndex":["aproposui","accueilui","asset","assets","cell","cellassets","cellmove","cellui","chronoui","chronometre","classementui","classement_gen","click","cluelabel","clueui","game","gamebutton","generator","grid","gridui","gtk","guess","guessmove","joueur_score","magick","magick::pixel","menuassets","menuitemui","menuui","mode","move","moves","object","observable","observator","options","optionsui","picture","playscreen","preview","randompic","rankedmode","sauvegardeui","sauvegardes","save","selectionui","solver","solver::axe","solver::axes","solver::block","solver::blocks","solver::boundblock","solver::cell","solver::firstblock","solver::lastblock","solver::setqueue","solver::solution","solver::solver","solver::strategieunify","solver::strategieunifyanyblack","solver::strategieunifyanycross","solver::strategieunifymax","terminal","terminalinput","timetrialmode","tutorialmode","widget","randompic#<=>()","object#clues()","moves#add()","save#add()","solver::axes#addall()","solver::axes#addaxe()","chronometre#addnomoretimeobs()","observable#addobservator()","game#addwinobservator()","chronometre#add_seconds()","sauvegardes#affichecomplet()","object#afficherindices()","classement_gen#ajoutable?()","classement_gen#ajoutejoueur()","cellui#applyasset()","menuitemui#applyasset()","game#applyguess()","asset#applyon()","randompic#beuniqify()","gridui#begindrag()","game#beginguess()","randompic#biggestaxe()","solver::block#bubbletobegin()","solver::firstblock#bubbletobegin()","solver::block#bubbletoend()","solver::lastblock#bubbletoend()","picture#calcindice()","randompic#calcindice()","playscreen#cancelhypothesis()","game#cellat()","grid#cellat()","guess#cellat()","cellassets#cell_asset()","cellassets#cell_asset_frozen()","cellassets#cell_asset_selected()","gridui#cellsfromfirsttoend()","accueilui#changebackground()","playscreen#changebackground()","clueui#changetoclue()","clueui#changetosum()","sauvegardes#chargerrepertoire()","save#clear()","playscreen#cleargame()","playscreen#clearhypothesis()","moves#clearredo()","gridui#clearselection()","gridui#clickdefined?()","gridui#clicked()","object#clueat()","solver::solution#clues()","gridui#colat()","game#colsolved?()","solver::blocks#compact()","solver::firstblock#compact()","solver::lastblock#compact()","grid#copyfrozen()","cellui#corecell()","gridui#corecellat()","picture::creer()","randompic::creer()","asset#delimg()","save#delete()","classement_gen#deserealisejoueurs()","classementui#deserelisejoueurs()","accueilui#display()","chronometre#display4ui()","joueur_score#donnemode()","joueur_score#donnenom()","sauvegardes#donnenom()","joueur_score#donnescore()","gridui#draged()","gridui#draged?()","cell#frozen?()","cell#frozenof()","solver::block#gap()","solver::block#gaps()","solver::blocks#gaps()","solver::firstblock#gaps()","solver::lastblock#gaps()","object#generategrid()","generator::get()","generator::getagrid()","solver::blocks#getblocksranges()","game#getgoodblockscol()","game#getgoodblocksrow()","asset#getimg()","sauvegardes#getindex()","sauvegardes#getinfos()","cellassets::getinstance()","menuassets::getinstance()","selectionui::getinstance()","grid#getsolvercellcol()","guess#getsolvercellcol()","grid#getsolvercellrow()","guess#getsolvercellrow()","game#getsolvercol()","game#getsolverrow()","solver::strategieunify::getstate()","solver::strategieunifyanyblack::getstate()","solver::strategieunifyanycross::getstate()","solver::strategieunifymax::getstate()","object#getsureindex()","object#getsureindexhuman()","picture#getindicescolonne()","picture#getindicesligne()","cluelabel#glow()","cluelabel#glow?()","clueui#glow_all()","terminal#gostate1()","terminal#gostate2()","terminal#gostate3()","solver::axe#goodblocks()","solver::solver#grade()","object#gridafficher()","object#groupeindicesgrid()","object#groupeindicesligne()","menuui#hide()","terminalinput#hide()","playscreen#highlight()","playscreen#highlightandgivetechniq()","gridui#hover()","solver::setqueue#in()","solver::solver::initcount()","mode#initfrompic()","rankedmode#initfrompic()","timetrialmode#initfrompic()","mode#initfromsave()","rankedmode#initfromsave()","timetrialmode#initfromsave()","accueilui#initgamemodesmenu()","menuitemui#initgtkeventbox()","gridui#initgtkgrid()","aproposui#initgtkobject()","menuui#initgtkobject()","optionsui#initgtkobject()","tutorialmode#initgtkobject()","accueilui#initgtkwindow()","accueilui#initmainmenu()","accueilui#initmenus()","accueilui#initlevelsmenu()","classement_gen::instance()","solver::block#intersection()","solver::block#intersections()","solver::blocks#intersections()","solver::firstblock#intersections()","solver::lastblock#intersections()","magick::pixel#isblack?()","menuassets#item_asset()","menuassets#item_asset_selected()","solver::block#known?()","cellui#leftclicked()","gridui#leftclicked_draged()","object#lignestr()","solver::blocks#littlegapsinrange()","assets#load()","save#load()","solver::blocks#minmaxpossiblesize()","solver::boundblock#moved?()","aproposui::new()","accueilui::new()","asset::new()","assets::new()","cell::new()","cellassets::new()","cellmove::new()","cellui::new()","chronoui::new()","chronometre::new()","classementui::new()","cluelabel::new()","clueui::new()","game::new()","gamebutton::new()","grid::new()","gridui::new()","guess::new()","guessmove::new()","joueur_score::new()","menuassets::new()","menuitemui::new()","menuui::new()","mode::new()","move::new()","moves::new()","object::new()","observable::new()","options::new()","optionsui::new()","picture::new()","playscreen::new()","preview::new()","randompic::new()","rankedmode::new()","sauvegardeui::new()","sauvegardes::new()","save::new()","selectionui::new()","solver::axe::new()","solver::axes::new()","solver::block::new()","solver::blocks::new()","solver::boundblock::new()","solver::cell::new()","solver::firstblock::new()","solver::lastblock::new()","solver::setqueue::new()","solver::solution::new()","solver::solver::new()","terminal::new()","terminalinput::new()","timetrialmode::new()","tutorialmode::new()","widget::new()","guess#next()","solver::block#next()","cellui#normal()","cluelabel#normal()","chronometre#notifynomoretime()","observable#notifyobservators()","game#notifywin()","preview#onconfigureeventsignal()","preview#ondrawsignal()","classementui#on_changed()","solver::setqueue#out()","solver::block#packbegin()","solver::lastblock#packbegin()","solver::block#packbeginnotrec()","solver::block#packend()","solver::firstblock#packend()","solver::block#packendnotrec()","cellassets#pathtocell()","cellassets#pathtoselectedcell()","chronoui#pause()","playscreen#pause()","chronometre#paused?()","chronometre#penality()","solver::block#prev=()","cell#primarychange()","picture#printindice()","randompic#printindice()","solver::axes#queuesize()","randompic#randgenerator()","chronometre#raz()","gridui#reallast()","guess#redo()","moves#redo()","clueui#removechild()","game#removeguess()","observable#removeobservator()","classement_gen#remplacedernier()","cellmove#replay()","guessmove#replay()","moves#replay()","cellmove#replaywithoutadd()","cellui#rightclicked()","gridui#rightclicked_draged()","guess#root?()","gridui#rowat()","game#rowsolved?()","chronometre#run()","playscreen#run()","cellui#samestate?()","cell#secondarychange()","cellui#select()","gridui#selection()","classementui#selectionneurmode()","classementui#selectn()","move#serialize()","options#setcluehighlightcolor()","options#setcolor()","options#sethelpcolor()","options#setlanguage()","save#setnbgrids()","menuitemui#setonclickevent()","menuui#setonclickevent()","options#setresolution()","classementui#setup_tree_view()","sauvegardeui#setup_tree_view()","cellui#show()","cluelabel#show()","clueui#show()","menuui#show()","selectionui#show()","terminalinput#show()","widget#show()","solver::solver#showgrid()","playscreen#showtechniq()","accueilui#show_all()","solver::axe#showingclues()","solver::axes#size()","solver::setqueue#size()","solver::block#slidefrombegin()","solver::lastblock#slidefrombegin()","solver::block#slidefromend()","solver::firstblock#slidefromend()","solver::axe#solvable?()","solver::axe#solve()","solver::axes#solve()","solver::solver#solve()","game#solved?()","solver::axe#solved?()","solver::axes#solved?()","solver::axe#solver_gaps()","solver::axe#solver_intersections()","solver::axe#solver_littlegapsinrange()","solver::axe#solver_minmaxpossiblesize()","accueilui#start()","chronoui#start()","chronometre#start()","object#startinfo()","object#startinfohuman()","solver::cell#state=()","chronometre#stop()","options#submit()","object#sumat()","sauvegardes#supprimer()","clueui#swap()","picture#toboolean()","cell#to_s()","chronometre#to_s()","game#to_s()","grid#to_s()","guess#to_s()","joueur_score#to_s()","picture#to_s()","randompic#to_s()","solver::axe#to_s()","solver::block#to_s()","solver::blocks#to_s()","solver::cell#to_s()","solver::solution#to_s()","solver::solver#to_s()","cell#to_solvercell()","guess#undo()","moves#undo()","solver::solver::uniqify()","chronoui#unpause()","playscreen#unpause()","cellui#unselect()","gridui#update()","observator#update()","preview#update()","selectionui#update()","gridui#updateall()","clueui#updateglowingclue()","gridui#updateglowingclue()","game#win?()","save#write()","",""],"info":[["AProposUi","","AProposUi.html","",""],["AccueilUi","","AccueilUi.html","","<p>Representation of the main menu\n"],["Asset","","Asset.html","","<p>Representation of an Asset, an Asset is an image witch is applied on a\nwidget\n"],["Assets","","Assets.html","","<p>abstract class Generates the preferences file used to remember the\nresolution, language, color of the …\n"],["Cell","","Cell.html","",""],["CellAssets","","CellAssets.html","",""],["CellMove","","CellMove.html","","<p>A CellMove is an action from the user who changes the state ef one or more\nCell\n"],["CellUi","","CellUi.html","","<p>Represents a cell in the grid\n"],["ChronoUi","","ChronoUi.html","","<p>Represents the “chrono” object in the UI\n"],["Chronometre","","Chronometre.html","","<p>Representation d&#39;un chronomètre thread\n"],["ClassementUi","","ClassementUi.html","",""],["Classement_gen","","Classement_gen.html","",""],["Click","","Click.html","",""],["ClueLabel","","ClueLabel.html","",""],["ClueUi","","ClueUi.html","",""],["Game","","Game.html","","<p>Representation of a Game\n"],["GameButton","","GameButton.html","","<p>Allows the use of an image as a button by placing it in a Gtk::EventBox\n"],["Generator","","Generator.html","","<p>Class which permit the generation of grids with different difficulties\n"],["Grid","","Grid.html","","<p>Representation of a Grid\n"],["GridUi","","GridUi.html","","<p>Graphic version of the Grid\n"],["Gtk","","Gtk.html","",""],["Guess","","Guess.html","","<p>Representation of a Guess, a Guess is like a removable try\n"],["GuessMove","","GuessMove.html","","<p>A GuessMove is an action from the user who creates or delete a guess\n"],["Joueur_score","","Joueur_score.html","",""],["Magick","","Magick.html","",""],["Magick::Pixel","","Magick/Pixel.html","",""],["MenuAssets","","MenuAssets.html","","<p>Representation of all the menu Assets. A menu Asset is one item of a menu.\nThis class is a Singleton …\n"],["MenuItemUi","","MenuItemUi.html","","<p>Representation a menu item\n"],["MenuUI","","MenuUI.html","","<p>Representation a menu\n"],["Mode","","Mode.html","","<p>Abstract class respresenting a Game Mode\n"],["Move","","Move.html","","<p>A Move is an action from the user who change the state of the current game\nLogging them allow the user …\n"],["Moves","","Moves.html","","<p>Representation of a Move collection\n"],["Object","","Object.html","",""],["Observable","","Observable.html","",""],["Observator","","Observator.html","",""],["Options","","Options.html","","<p>Representation of user settings and preferences\n"],["OptionsUi","","OptionsUi.html","",""],["Picture","","Picture.html","","<p>Create a picture from an image and convert it to be playable in a picross\ngame\n"],["PlayScreen","","PlayScreen.html","","<p>Represents the game menu\n"],["Preview","","Preview.html","",""],["RandomPic","","RandomPic.html","","<p>Create a random binary picture\n"],["RankedMode","","RankedMode.html","","<p>Representation of the RankedMode object\n"],["SauvegardeUi","","SauvegardeUi.html","",""],["Sauvegardes","","Sauvegardes.html","",""],["Save","","Save.html","","<p>Representation of a game save\n"],["SelectionUi","","SelectionUi.html","",""],["Solver","","Solver.html","",""],["Solver::Axe","","Solver/Axe.html","",""],["Solver::Axes","","Solver/Axes.html","",""],["Solver::Block","","Solver/Block.html","",""],["Solver::Blocks","","Solver/Blocks.html","",""],["Solver::BoundBlock","","Solver/BoundBlock.html","",""],["Solver::Cell","","Solver/Cell.html","",""],["Solver::FirstBlock","","Solver/FirstBlock.html","",""],["Solver::LastBlock","","Solver/LastBlock.html","",""],["Solver::SetQueue","","Solver/SetQueue.html","",""],["Solver::Solution","","Solver/Solution.html","",""],["Solver::Solver","","Solver/Solver.html","",""],["Solver::StrategieUnify","","Solver/StrategieUnify.html","",""],["Solver::StrategieUnifyAnyBlack","","Solver/StrategieUnifyAnyBlack.html","",""],["Solver::StrategieUnifyAnyCross","","Solver/StrategieUnifyAnyCross.html","",""],["Solver::StrategieUnifyMax","","Solver/StrategieUnifyMax.html","",""],["Terminal","","Terminal.html","",""],["TerminalInput","","TerminalInput.html","",""],["TimeTrialMode","","TimeTrialMode.html","","<p>Representation of the TimeTrialMode object\n"],["TutorialMode","","TutorialMode.html","",""],["Widget","","Widget.html","",""],["<=>","RandomPic","RandomPic.html#method-i-3C-3D-3E","(other)",""],["Clues","Object","Object.html#method-i-Clues","()","<p>An Instance of Clues is a List of clue\n"],["add","Moves","Moves.html#method-i-add","(move)","<p>Adds a Move to moves stack and clears redo stack\n<p><strong>Arguments</strong> :\n<p><code>move</code> -&gt; the move to add\n"],["add","Save","Save.html#method-i-add","(move,game)","<p>Adds a Move to this Save and play it on a Game\n<p><strong>Arguments</strong> :\n<p><code>move</code> -&gt; The Move to play\n"],["addAll","Solver::Axes","Solver/Axes.html#method-i-addAll","()",""],["addAxe","Solver::Axes","Solver/Axes.html#method-i-addAxe","(index)",""],["addNoMoreTimeObs","Chronometre","Chronometre.html#method-i-addNoMoreTimeObs","(obs)",""],["addObservator","Observable","Observable.html#method-i-addObservator","(observator)",""],["addWinObservator","Game","Game.html#method-i-addWinObservator","(obs)","<p>Add a win observer\n<p><strong>Arguments</strong> :\n<p><code>obs</code>     -&gt; a Proc to call when the Game is Won\n"],["add_seconds","Chronometre","Chronometre.html#method-i-add_seconds","(seconds)",""],["afficheComplet","Sauvegardes","Sauvegardes.html#method-i-afficheComplet","()","<p>Display the saves list.\n"],["afficherIndices","Object","Object.html#method-i-afficherIndices","(grid)",""],["ajoutable?","Classement_gen","Classement_gen.html#method-i-ajoutable-3F","(unJoueur)","<p>Check if the player id the 10 bests.\n<p><strong>Arguments</strong> :\n<p><code>unJoueur</code> -&gt; a Joueur_score object.\n"],["ajouteJoueur","Classement_gen","Classement_gen.html#method-i-ajouteJoueur","(unJoueur)","<p>Add the Joueur_score in parameter to the classement.\n<p><strong>Arguments</strong> :\n<p><code>unJoueur</code> -&gt; a Joueur_score object. …\n"],["applyAsset","CellUi","CellUi.html#method-i-applyAsset","()","<p>refreshes the appearance of the CellUi object also refreshes the preview\n"],["applyAsset","MenuItemUi","MenuItemUi.html#method-i-applyAsset","(asset)","<p>Applies the given Asset\n<p><strong>Arguments</strong> :\n<p><code>asset</code>     -&gt; the Asset to apply\n"],["applyGuess","Game","Game.html#method-i-applyGuess","()","<p>Apply the Guess\n"],["applyOn","Asset","Asset.html#method-i-applyOn","(widget)","<p>Applies this Asset on the given widget\n<p><strong>Arguments</strong> :\n<p><code>widget</code>     -&gt; The widget to apply on\n"],["beUniqify","RandomPic","RandomPic.html#method-i-beUniqify","()","<p>Make the picture unique (1 way to solve) &amp; give a grade for this\npicture\n"],["beginDrag","GridUi","GridUi.html#method-i-beginDrag","(cell, click)",""],["beginGuess","Game","Game.html#method-i-beginGuess","()","<p>Begin a new Guess\n"],["biggestAxe","RandomPic","RandomPic.html#method-i-biggestAxe","()","<p>Determine the biggest axe in the matrix (number of clue)\n<p><strong>Returns</strong> :\n\n<p>The size of the biggest axe\n"],["bubbleToBegin","Solver::Block","Solver/Block.html#method-i-bubbleToBegin","()",""],["bubbleToBegin","Solver::FirstBlock","Solver/FirstBlock.html#method-i-bubbleToBegin","()",""],["bubbleToEnd","Solver::Block","Solver/Block.html#method-i-bubbleToEnd","()",""],["bubbleToEnd","Solver::LastBlock","Solver/LastBlock.html#method-i-bubbleToEnd","()",""],["calcIndice","Picture","Picture.html#method-i-calcIndice","()","<p>Set row and col clues from boolean arrays\n<p><strong>Returns</strong> :\n\n<p>boolean arrays\n"],["calcIndice","RandomPic","RandomPic.html#method-i-calcIndice","()","<p>Set row and col clues from boolean arrays\n<p><strong>Returns</strong> :\n\n<p>boolean arrays\n"],["cancelHypothesis","PlayScreen","PlayScreen.html#method-i-cancelHypothesis","(grid)","<p>Cancels the current guess by undoing every move of the player&#39;s current\nguess (unsing the clearHypothesis …\n"],["cellAt","Game","Game.html#method-i-cellAt","(row, col)","<p>Returns the Cell at the given row, col\n<p><strong>Arguments</strong> :\n<p><code>row</code>     -&gt; The row index of The wanted Cell\n"],["cellAt","Grid","Grid.html#method-i-cellAt","(row, col)","<p>Returns the Cell at the given row, col\n<p><strong>Arguments</strong> :\n<p><code>row</code>     -&gt; The row index of The wanted Cell\n"],["cellAt","Guess","Guess.html#method-i-cellAt","(row, col)","<p>Returns the Cell at the given row, col\n<p><strong>Arguments</strong> :\n<p><code>row</code>     -&gt; The row index of The wanted Cell\n"],["cell_asset","CellAssets","CellAssets.html#method-i-cell_asset","(state)","<p>Getter function\n<p><strong>Arguments</strong> :\n<p><code>state</code> -&gt; the state of the cell [:black, :white:, crossed]\n"],["cell_asset_frozen","CellAssets","CellAssets.html#method-i-cell_asset_frozen","(state)","<p>Getter function\n<p><strong>Arguments</strong> :\n<p><code>state</code> -&gt; the state of the cell [:black, :white:, :crossed]\n"],["cell_asset_selected","CellAssets","CellAssets.html#method-i-cell_asset_selected","(state)","<p>Getter function\n<p><strong>Arguments</strong> :\n<p><code>state</code> -&gt; the state of the cell [:black, :white:, :crossed]\n"],["cellsFromFirstToEnd","GridUi","GridUi.html#method-i-cellsFromFirstToEnd","()",""],["changeBackground","AccueilUi","AccueilUi.html#method-i-changeBackground","(image)","<p>Updates main window background with the given image\n<p><strong>Arguments</strong> :\n<p><code>image</code>     -&gt; image name to display\n"],["changeBackground","PlayScreen","PlayScreen.html#method-i-changeBackground","(image)","<p>Calls the @accueil object&#39;s changeBackground method\n<p><strong>Arguments</strong> :\n<p><code>image</code> -&gt; The name of the image to …\n"],["changeToClue","ClueUi","ClueUi.html#method-i-changeToClue","()",""],["changeToSum","ClueUi","ClueUi.html#method-i-changeToSum","()",""],["chargerRepertoire","Sauvegardes","Sauvegardes.html#method-i-chargerRepertoire","()","<p>Collect all names of saves files.\n"],["clear","Save","Save.html#method-i-clear","()","<p>Clears this Save Moves\n"],["clearGame","PlayScreen","PlayScreen.html#method-i-clearGame","(grid)","<p>Cancels every guess and clears the grid effectively going back to the\nbeginning of the game\n"],["clearHypothesis","PlayScreen","PlayScreen.html#method-i-clearHypothesis","(grid)","<p>Undoes every move of the player&#39;s current guess\n<p><strong>Arguments</strong> :\n<p><code>grid</code> -&gt; The GridUi Object reprenseting …\n"],["clearRedo","Moves","Moves.html#method-i-clearRedo","()","<p>Clears redo stack\n"],["clearSelection","GridUi","GridUi.html#method-i-clearSelection","()","<p>Clears the SelectionUi\n"],["clickdefined?","GridUi","GridUi.html#method-i-clickdefined-3F","()",""],["clicked","GridUi","GridUi.html#method-i-clicked","(cell)",""],["clueAt","Object","Object.html#method-i-clueAt","(index)","<p>Returns the Clue at the given index\n<p><strong>Arguments</strong> :\n<p><code>index</code>     -&gt; The index of The wanted Clue\n"],["clues","Solver::Solution","Solver/Solution.html#method-i-clues","()",""],["colAt","GridUi","GridUi.html#method-i-colAt","(ind)",""],["colSolved?","Game","Game.html#method-i-colSolved-3F","(coli)","<p>Returns a boolean indicate if the cel at the given index is solved or not\n<p><strong>Arguments</strong> :\n<p><code>coli</code>     -&gt; The …\n"],["compact","Solver::Blocks","Solver/Blocks.html#method-i-compact","()",""],["compact","Solver::FirstBlock","Solver/FirstBlock.html#method-i-compact","()","<p>first way:\n"],["compact","Solver::LastBlock","Solver/LastBlock.html#method-i-compact","()","<p>second way:\n"],["copyFrozen","Grid","Grid.html#method-i-copyFrozen","()","<p>Returns the a frozen copy of this Grid\n<p><strong>Returns</strong> :\n<p>a copy of this Grid\n"],["coreCell","CellUi","CellUi.html#method-i-coreCell","()","<p>Returns the Cell object corresponding to this CellUi object in the grid\n"],["coreCellAt","GridUi","GridUi.html#method-i-coreCellAt","(row, col)","<p>Returns the Cell at given row, col\n<p><strong>Arguments</strong> :\n<p><code>row</code>     -&gt; The row of the wanted cell\n"],["creer","Picture","Picture.html#method-c-creer","(imageName,dimension,precision)",""],["creer","RandomPic","RandomPic.html#method-c-creer","(dimension)",""],["delImg","Asset","Asset.html#method-i-delImg","(widget)","<p>Removes this Asset from the given widget\n<p><strong>Arguments</strong> :\n<p><code>widget</code>     -&gt; The widget to remove from\n"],["delete","Save","Save.html#method-i-delete","()","<p>Deletes this Save\n"],["deserealiseJoueurs","Classement_gen","Classement_gen.html#method-i-deserealiseJoueurs","()","<p>Extract the Joueur_score from the file output.yml.\n<p><strong>Returns</strong> : -The array of Joueur_score.\n\n"],["desereliseJoueurs","ClassementUi","ClassementUi.html#method-i-desereliseJoueurs","()",""],["display","AccueilUi","AccueilUi.html#method-i-display","(obj)","<p>Displays on the main window an object who MUST have a readable Gtk::Box\nattribute\n<p><strong>Arguments</strong> :\n<p><code>obj</code>     -&gt; …\n"],["display4Ui","Chronometre","Chronometre.html#method-i-display4Ui","()",""],["donneMode","Joueur_score","Joueur_score.html#method-i-donneMode","()","<p>Return the game mode.\n<p><strong>Returns</strong> : -The game mode.\n\n"],["donneNom","Joueur_score","Joueur_score.html#method-i-donneNom","()","<p>Return the name of the player.\n<p><strong>Returns</strong> : -The name of the player.\n\n"],["donneNom","Sauvegardes","Sauvegardes.html#method-i-donneNom","(unEntier)","<p>Return the index of the save file in the array.\n<p><strong>Arguments</strong> :\n<p><code>unIndex</code> -&gt; index of the saves in the save …\n"],["donneScore","Joueur_score","Joueur_score.html#method-i-donneScore","()","<p>Return the score of the player.\n<p><strong>Returns</strong> : -The score of the player.\n\n"],["draged","GridUi","GridUi.html#method-i-draged","(type)",""],["draged?","GridUi","GridUi.html#method-i-draged-3F","()",""],["frozen?","Cell","Cell.html#method-i-frozen-3F","()","<p>Reader for @frozen attribute\n<p><strong>Returns</strong> :\n<p>A Boolean, if it&#39;s true, you can modify this Cell state, if …\n"],["frozenOf","Cell","Cell.html#method-i-frozenOf","(cell)",""],["gap","Solver::Block","Solver/Block.html#method-i-gap","()",""],["gaps","Solver::Block","Solver/Block.html#method-i-gaps","(infos)",""],["gaps","Solver::Blocks","Solver/Blocks.html#method-i-gaps","()",""],["gaps","Solver::FirstBlock","Solver/FirstBlock.html#method-i-gaps","()",""],["gaps","Solver::LastBlock","Solver/LastBlock.html#method-i-gaps","(infos)",""],["generateGrid","Object","Object.html#method-i-generateGrid","(imageName)",""],["get","Generator","Generator.html#method-c-get","(difficulty)","<p>Get a picross grid to play with the diffulty choosen\n<p><strong>Arguments</strong> :\n\n<p><code>difficulty</code> -&gt; The difficulty of the …\n"],["getAGrid","Generator","Generator.html#method-c-getAGrid","(te,fif,tw,diff)","<p>Get a picross grid to play with the diffulty choosen\n<p><strong>Arguments</strong> :\n<p><code>diff</code> -&gt; The difficulty choosen\n"],["getBlocksRanges","Solver::Blocks","Solver/Blocks.html#method-i-getBlocksRanges","(&goodCell)",""],["getGoodBlocksCol","Game","Game.html#method-i-getGoodBlocksCol","(index)",""],["getGoodBlocksRow","Game","Game.html#method-i-getGoodBlocksRow","(index)",""],["getImg","Asset","Asset.html#method-i-getImg","()","<p>Returns a Gtk::Image containing this image\n<p><strong>Returns</strong> :\n<p>the Gtk::Image\n"],["getIndex","Sauvegardes","Sauvegardes.html#method-i-getIndex","(uneValeur)","<p>Return the index of the save file in the array.\n<p><strong>Arguments</strong> :\n<p><code>uneValeur</code> -&gt; The save name.\n"],["getInfos","Sauvegardes","Sauvegardes.html#method-i-getInfos","(unIndex)","<p>get the information of the file name in an array.\n<p><strong>Arguments</strong> :\n<p><code>unIndex</code> -&gt; Index of the saves in the save …\n"],["getInstance","CellAssets","CellAssets.html#method-c-getInstance","(size)","<p>Allows for only a single instance of CellAssets to be created per grid size\n<p><strong>Arguments</strong> :\n<p><code>size</code> -&gt; the …\n"],["getInstance","MenuAssets","MenuAssets.html#method-c-getInstance","()","<p>Returns the only MenuAssets object\n"],["getInstance","SelectionUi","SelectionUi.html#method-c-getInstance","()",""],["getSolverCellCol","Grid","Grid.html#method-i-getSolverCellCol","(coli)",""],["getSolverCellCol","Guess","Guess.html#method-i-getSolverCellCol","(coli)",""],["getSolverCellRow","Grid","Grid.html#method-i-getSolverCellRow","(rowi)",""],["getSolverCellRow","Guess","Guess.html#method-i-getSolverCellRow","(rowi)",""],["getSolverCol","Game","Game.html#method-i-getSolverCol","(coli)",""],["getSolverRow","Game","Game.html#method-i-getSolverRow","(rowi)",""],["getState","Solver::StrategieUnify","Solver/StrategieUnify.html#method-c-getState","(cells)",""],["getState","Solver::StrategieUnifyAnyBlack","Solver/StrategieUnifyAnyBlack.html#method-c-getState","(cells)",""],["getState","Solver::StrategieUnifyAnyCross","Solver/StrategieUnifyAnyCross.html#method-c-getState","(cells)",""],["getState","Solver::StrategieUnifyMax","Solver/StrategieUnifyMax.html#method-c-getState","(cells)",""],["getSureIndex","Object","Object.html#method-i-getSureIndex","(blocks, nCell)","<p>recherche des cases que l&#39;on peut noircire dès les début\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">pour</span> <span class=\"ruby-identifier\">une</span> <span class=\"ruby-identifier\">machine</span>\n</pre>\n"],["getSureIndexHuman","Object","Object.html#method-i-getSureIndexHuman","(blocks, nCell)","<p>2.pour un humain\n"],["getindicesColonne","Picture","Picture.html#method-i-getindicesColonne","(i)","<p>Get a col clue with an index\n<p><strong>Arguments</strong> :\n\n<p><code>i</code> -&gt; Index\n"],["getindicesLigne","Picture","Picture.html#method-i-getindicesLigne","(i)","<p>Get a row clue with an index\n<p><strong>Arguments</strong> :\n\n<p><code>i</code> -&gt; Index\n"],["glow","ClueLabel","ClueLabel.html#method-i-glow","()",""],["glow?","ClueLabel","ClueLabel.html#method-i-glow-3F","()",""],["glow_all","ClueUi","ClueUi.html#method-i-glow_all","()",""],["goState1","Terminal","Terminal.html#method-i-goState1","()",""],["goState2","Terminal","Terminal.html#method-i-goState2","()",""],["goState3","Terminal","Terminal.html#method-i-goState3","()",""],["goodBlocks","Solver::Axe","Solver/Axe.html#method-i-goodBlocks","()",""],["grade","Solver::Solver","Solver/Solver.html#method-i-grade","()",""],["gridAfficher","Object","Object.html#method-i-gridAfficher","(grid)",""],["groupeIndicesGrid","Object","Object.html#method-i-groupeIndicesGrid","(grid)",""],["groupeIndicesLigne","Object","Object.html#method-i-groupeIndicesLigne","(ligne)",""],["hide","MenuUI","MenuUI.html#method-i-hide","()","<p>Hides all the MenuItemUis\n"],["hide","TerminalInput","TerminalInput.html#method-i-hide","()",""],["highlight","PlayScreen","PlayScreen.html#method-i-highlight","()","<p>Highlights a row or column where a cell can be checked or crossed\n"],["highlightAndGiveTechniq","PlayScreen","PlayScreen.html#method-i-highlightAndGiveTechniq","()","<p>Highlights a row or colmn in the grid and gives a solving technique to the\nplayer Using this help increases …\n"],["hover","GridUi","GridUi.html#method-i-hover","(cell)",""],["in","Solver::SetQueue","Solver/SetQueue.html#method-i-in","(index)",""],["initCount","Solver::Solver","Solver/Solver.html#method-c-initCount","()",""],["initFromPic","Mode","Mode.html#method-i-initFromPic","(pic,mode,level, accueil)","<p>Creates a new Mode object when it&#39;s a new game (never called\nexplicitly)\n"],["initFromPic","RankedMode","RankedMode.html#method-i-initFromPic","(pic,mode,level, accueil)",""],["initFromPic","TimeTrialMode","TimeTrialMode.html#method-i-initFromPic","(pic,mode,level, accueil)",""],["initFromSave","Mode","Mode.html#method-i-initFromSave","(path, accueil)","<p>Creates a new Mode object when reloading a game (never called explicitly)\n"],["initFromSave","RankedMode","RankedMode.html#method-i-initFromSave","(path, accueil)",""],["initFromSave","TimeTrialMode","TimeTrialMode.html#method-i-initFromSave","(path, accueil)",""],["initGameModesMenu","AccueilUi","AccueilUi.html#method-i-initGameModesMenu","()","<p>Inits game mode menu\n"],["initGtkEventBox","MenuItemUi","MenuItemUi.html#method-i-initGtkEventBox","()","<p>Inits the Gtk::EventBox\n"],["initGtkGrid","GridUi","GridUi.html#method-i-initGtkGrid","()","<p>Inits the Gtk::Grid\n"],["initGtkObject","AProposUi","AProposUi.html#method-i-initGtkObject","(parent)",""],["initGtkObject","MenuUI","MenuUI.html#method-i-initGtkObject","()","<p>Inits the Gtk::ButtonBox by adding all the MenuItemUis\n"],["initGtkObject","OptionsUi","OptionsUi.html#method-i-initGtkObject","(parent)",""],["initGtkObject","TutorialMode","TutorialMode.html#method-i-initGtkObject","(parent)",""],["initGtkWindow","AccueilUi","AccueilUi.html#method-i-initGtkWindow","()","<p>Inits Main window\n"],["initMainMenu","AccueilUi","AccueilUi.html#method-i-initMainMenu","()","<p>Inits main menu\n"],["initMenus","AccueilUi","AccueilUi.html#method-i-initMenus","()","<p>Inits all menus\n"],["initlevelsMenu","AccueilUi","AccueilUi.html#method-i-initlevelsMenu","()","<p>Inits levels menu\n"],["instance","Classement_gen","Classement_gen.html#method-c-instance","()",""],["intersection","Solver::Block","Solver/Block.html#method-i-intersection","()",""],["intersections","Solver::Block","Solver/Block.html#method-i-intersections","(infos)",""],["intersections","Solver::Blocks","Solver/Blocks.html#method-i-intersections","()",""],["intersections","Solver::FirstBlock","Solver/FirstBlock.html#method-i-intersections","()",""],["intersections","Solver::LastBlock","Solver/LastBlock.html#method-i-intersections","(infos)",""],["isBlack?","Magick::Pixel","Magick/Pixel.html#method-i-isBlack-3F","()","\n<pre class=\"ruby\"><span class=\"ruby-constant\">To</span> <span class=\"ruby-identifier\">know</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">pixel</span> <span class=\"ruby-identifier\">is</span> <span class=\"ruby-identifier\">black</span> <span class=\"ruby-keyword\">or</span> <span class=\"ruby-identifier\">white</span>\n</pre>\n<p><strong>Returns</strong> :\n\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">boolean</span>\n</pre>\n"],["item_asset","MenuAssets","MenuAssets.html#method-i-item_asset","(name)","<p>Gets the Asset corresponding to the given symbol\n<p><strong>Arguments</strong> :\n<p><code>name</code>     -&gt; the symbol\n"],["item_asset_selected","MenuAssets","MenuAssets.html#method-i-item_asset_selected","(name)","<p>Gets the selected Asset corresponding to the given symbol\n<p><strong>Arguments</strong> :\n<p><code>name</code>     -&gt; the symbol\n"],["known?","Solver::Block","Solver/Block.html#method-i-known-3F","()",""],["leftClicked","CellUi","CellUi.html#method-i-leftClicked","()","<p>Applies the primary change on the cell @see Cell\n"],["leftClicked_draged","GridUi","GridUi.html#method-i-leftClicked_draged","()","<p>called when a draged left click occur on the grid\n"],["ligneStr","Object","Object.html#method-i-ligneStr","(ligne)",""],["littleGapsInRange","Solver::Blocks","Solver/Blocks.html#method-i-littleGapsInRange","()","<p>for each gaps (a set of white cells surround by cross cells)\n"],["load","Assets","Assets.html#method-i-load","()",""],["load","Save","Save.html#method-i-load","(game)","<p>Plays all Moves on a Game\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; The Game to play on\n"],["minMaxPossibleSize","Solver::Blocks","Solver/Blocks.html#method-i-minMaxPossibleSize","()","<p>get the size of the smallest matching block for each continuous range of \nblack cells\n"],["moved?","Solver::BoundBlock","Solver/BoundBlock.html#method-i-moved-3F","()",""],["new","AProposUi","AProposUi.html#method-c-new","(parent)",""],["new","AccueilUi","AccueilUi.html#method-c-new","()","<p>Creates a new AccueilUi object\n"],["new","Asset","Asset.html#method-c-new","(file)","<p>Creates a new Asset object\n<p><strong>Arguments</strong> :\n<p><code>file</code>     -&gt; The path to the Image\n"],["new","Assets","Assets.html#method-c-new","()",""],["new","Cell","Cell.html#method-c-new","(args={state: :white, frozen: false})","<p>Creates a new Cell object\n<p><strong>Arguments</strong> :\n<p><code>state</code>     -&gt; The state of the Cell one of [:crossed :black\n:white] …\n"],["new","CellAssets","CellAssets.html#method-c-new","(size)","<p>Uses the initialize method of the Assets class to get the language, color,\nresolution of the game Then …\n"],["new","CellMove","CellMove.html#method-c-new","(cells, fState, type)","<p>Creates a new CellMove object\n<p><strong>Arguments</strong> :\n<p><code>cells</code> -&gt; all modified cells\n"],["new","CellUi","CellUi.html#method-c-new","(parent, row, col, assets)","<p>Creates a CellUi object and generates its behavior when clicked and entered\nWhen clicking on a cellUi, …\n"],["new","ChronoUi","ChronoUi.html#method-c-new","(chrono,parent)","<p>Creates a Gtk::EventBox which displays the time spent / left in the game #\n* <strong>Arguments</strong> :\n\n<pre>- +chrono+ -&gt; ...</pre>\n"],["new","Chronometre","Chronometre.html#method-c-new","(mode,temps_ecoule = 0)","<p>Initialise une nouvelle instance de la classe chronometre @param\nlabelChrono le texte affiché sur le …\n"],["new","ClassementUi","ClassementUi.html#method-c-new","(parent)","<p>Creates a new Classement menu.\n<p><strong>Arguments</strong> :\n<p><code>Parent</code> -&gt; The parent menu of this one.\n"],["new","ClueLabel","ClueLabel.html#method-c-new","(len)",""],["new","ClueUi","ClueUi.html#method-c-new","(orientation, blocks, index)",""],["new","Game","Game.html#method-c-new","(rowClues, colClues, save, timer)","<p>Creates a new Game object\n<p><strong>Arguments</strong> :\n<p><code>rowClues</code>     -&gt; Row Clues\n"],["new","GameButton","GameButton.html#method-c-new","(name, &block)","<p><strong>Arguments</strong> :\n<p><code>name</code> -&gt; the name of the image to be used as a button\n<p><code>block</code> -&gt; the actions the button …\n"],["new","Grid","Grid.html#method-c-new","(nRow, nCol)","<p>Creates a new Grid object\n<p><strong>Arguments</strong> :\n<p><code>nRow</code>     -&gt; the number of rows\n"],["new","GridUi","GridUi.html#method-c-new","(game, assets)","<p>Creates a new GridUi object\n<p><strong>Arguments</strong> :\n<p><code>game</code>     -&gt; The Game\n"],["new","Guess","Guess.html#method-c-new","(grid, prev = nil)","<p>Creates a new Guess object\n<p><strong>Arguments</strong> :\n<p><code>grid</code>     -&gt; the Grid\n"],["new","GuessMove","GuessMove.html#method-c-new","(type)","<p>Creates a new GuessMove object\n<p><strong>Arguments</strong> :\n<p><code>type</code> -&gt; the type of Guess change (:begin, :remove)\n"],["new","Joueur_score","Joueur_score.html#method-c-new","(unNom,unScore,unMode)","<p>Creates a new Joueur_score object.\n<p><strong>Arguments</strong> :\n<p><code>unNom</code> -&gt; The player name.\n"],["new","MenuAssets","MenuAssets.html#method-c-new","()","<p>Inits all the menu assets\n"],["new","MenuItemUi","MenuItemUi.html#method-c-new","(name, assets)","<p>Creates a new MenuItemUi object\n<p><strong>Arguments</strong> :\n<p><code>name</code>     -&gt; button name, i.e symbol corresponding to his …\n"],["new","MenuUI","MenuUI.html#method-c-new","(buttonsName, assets)","<p>Creates a new MenuUI object\n<p><strong>Arguments</strong> :\n<p><code>buttonsName</code> -&gt; All the MenuItemUi names\n"],["new","Mode","Mode.html#method-c-new","(accueil, pic = nil,mode = \"\", level=\"\",path = nil)","<p>Creates a new Mode object (never called explicitly)\n"],["new","Move","Move.html#method-c-new","(timeStamp)",""],["new","Moves","Moves.html#method-c-new","(moves = [])","<p>Creates a new Moves object\n<p><strong>Arguments</strong> :\n<p><code>moves</code> -&gt; all the Move s (empty by default)\n"],["new","Object","Object.html#method-c-new","(clues)","<p>Creates a new Clues object\n<p><strong>Arguments</strong> :\n<p><code>clues</code>     -&gt; The List of Clue\n"],["new","Observable","Observable.html#method-c-new","()",""],["new","Options","Options.html#method-c-new","()","<p>Creates a new Options object\n"],["new","OptionsUi","OptionsUi.html#method-c-new","(parent)",""],["new","Picture","Picture.html#method-c-new","(imageName,dimension,precision)","<p>Create a picture from an image\n<p><strong>Arguments</strong> :\n<p><code>imageName</code> -&gt; Image&#39;s name\n"],["new","PlayScreen","PlayScreen.html#method-c-new","(grid, accueil)","<p><strong>Arguments</strong> :\n<p><code>grid</code> -&gt; a GridUi Object\n<p><code>accueil</code> -&gt; an AccueilUi Object, needed to be able to go\nback …\n"],["new","Preview","Preview.html#method-c-new","(game)",""],["new","RandomPic","RandomPic.html#method-c-new","(dimension)","<p>Create a random picture, ready to play in a picross game\n<p><strong>Arguments</strong> :\n<p><code>dimension</code> -&gt; Resize dimension that …\n"],["new","RankedMode","RankedMode.html#method-c-new","(difficulty, accueilui, path = \"\")","<p>Creates a new RankedMode If path param is set, load the corresponding\nRanked Game else creates a new …\n"],["new","SauvegardeUi","SauvegardeUi.html#method-c-new","(parent)","<p>Creates a new Sauvegardes menu.\n<p><strong>Arguments</strong> :\n<p><code>Parent</code> -&gt; The parent menu of this one.\n"],["new","Sauvegardes","Sauvegardes.html#method-c-new","(unChemin,typeFichier)","<p>Creates a new Sauvegardes object.\n<p><strong>Arguments</strong> :\n<p><code>unChemin</code> -&gt; The path to the saves.\n"],["new","Save","Save.html#method-c-new","(path=\"\",rows = nil, cols= nil, mode = \"\", level=\"\", time = 0)","<p>Creates a new Save object\n<p><strong>Arguments</strong> :\n<p><code>path</code> -&gt; The path to this Save file\n"],["new","SelectionUi","SelectionUi.html#method-c-new","()",""],["new","Solver::Axe","Solver/Axe.html#method-c-new","(cells, clues=[])",""],["new","Solver::Axes","Solver/Axes.html#method-c-new","(axes, clues)",""],["new","Solver::Block","Solver/Block.html#method-c-new","(size, cells)",""],["new","Solver::Blocks","Solver/Blocks.html#method-c-new","(cells, clues)",""],["new","Solver::BoundBlock","Solver/BoundBlock.html#method-c-new","(cells)","<p>@initialFirst @initialLast\n"],["new","Solver::Cell","Solver/Cell.html#method-c-new","(state = :white)",""],["new","Solver::FirstBlock","Solver/FirstBlock.html#method-c-new","(cells)",""],["new","Solver::LastBlock","Solver/LastBlock.html#method-c-new","(cells)",""],["new","Solver::SetQueue","Solver/SetQueue.html#method-c-new","()","<p>made to contain only index of an array\n"],["new","Solver::Solution","Solver/Solution.html#method-c-new","(grid)",""],["new","Solver::Solver","Solver/Solver.html#method-c-new","(rowsBlocks, colsBlocks, grid=nil, bet=nil)",""],["new","Terminal","Terminal.html#method-c-new","(grid)",""],["new","TerminalInput","TerminalInput.html#method-c-new","(name)",""],["new","TimeTrialMode","TimeTrialMode.html#method-c-new","(accueilui,path = \"\", difficulty = :easy, nbGridsEnded = 0, time = 600)","<p>Creates a new TimeTrialMode object If path param is set, load the\ncorresponding TimeTrial Game else creates …\n"],["new","TutorialMode","TutorialMode.html#method-c-new","(parent)",""],["new","Widget","Widget.html#method-c-new","(gtkObject)",""],["next","Guess","Guess.html#method-i-next","()","<p>Returns a new Guess who has this one as previous\n<p><strong>Returns</strong> :\n<p>Guess\n"],["next","Solver::Block","Solver/Block.html#method-i-next","(=(blk))",""],["normal","CellUi","CellUi.html#method-i-normal","()","<p>Changes the appearance of the cell to is normal aspect\n"],["normal","ClueLabel","ClueLabel.html#method-i-normal","()",""],["notifyNoMoreTime","Chronometre","Chronometre.html#method-i-notifyNoMoreTime","()",""],["notifyObservators","Observable","Observable.html#method-i-notifyObservators","(*args)","<p>Send a notification with an array of data\n"],["notifyWin","Game","Game.html#method-i-notifyWin","()","<p>Notify all win observers that the Game was just won\n"],["onConfigureEventSignal","Preview","Preview.html#method-i-onConfigureEventSignal","(da)",""],["onDrawSignal","Preview","Preview.html#method-i-onDrawSignal","(cr)",""],["on_changed","ClassementUi","ClassementUi.html#method-i-on_changed","(sender, event)",""],["out","Solver::SetQueue","Solver/SetQueue.html#method-i-out","()",""],["packBegin","Solver::Block","Solver/Block.html#method-i-packBegin","()",""],["packBegin","Solver::LastBlock","Solver/LastBlock.html#method-i-packBegin","()","<p>first way\n"],["packBeginNotRec","Solver::Block","Solver/Block.html#method-i-packBeginNotRec","()","<p>functions to find the smallest solution packed toward the begining of the\ntrack\n"],["packEnd","Solver::Block","Solver/Block.html#method-i-packEnd","()",""],["packEnd","Solver::FirstBlock","Solver/FirstBlock.html#method-i-packEnd","()","<p>second way:\n"],["packEndNotRec","Solver::Block","Solver/Block.html#method-i-packEndNotRec","()","<p>functions to find the smallest solution packed toward the end of the track\n"],["pathToCell","CellAssets","CellAssets.html#method-i-pathToCell","(state)","<p>Getter function\n<p><strong>Arguments</strong> :\n<p><code>state</code> -&gt; the state of the cell [“black”, “white”, “cross”]\n…\n"],["pathToSelectedCell","CellAssets","CellAssets.html#method-i-pathToSelectedCell","(state)","<p>Getter function\n<p><strong>Arguments</strong> :\n<p><code>state</code> -&gt; the state of the cell [“black”, “white”, “cross”]\n…\n"],["pause","ChronoUi","ChronoUi.html#method-i-pause","()","<p>Stops the timer\n"],["pause","PlayScreen","PlayScreen.html#method-i-pause","()","<p>Pauses the game. The grid is hidden and the pause menu is displayed in its\nstead\n"],["paused?","Chronometre","Chronometre.html#method-i-paused-3F","()","<p>Predicat vrai si chronomètre actuellement en pause.\n"],["penality","Chronometre","Chronometre.html#method-i-penality","(seconds)",""],["prev=","Solver::Block","Solver/Block.html#method-i-prev-3D","(blk)",""],["primaryChange","Cell","Cell.html#method-i-primaryChange","()","<p>Apply a primary change on this Cell (left click)\n<p><strong>Returns</strong> :\n<p>A Boolean, if it&#39;s true, the change had …\n"],["printIndice","Picture","Picture.html#method-i-printIndice","()","<p>Print row and col clues\n"],["printIndice","RandomPic","RandomPic.html#method-i-printIndice","()","<p>Print row and col clues\n"],["queueSize","Solver::Axes","Solver/Axes.html#method-i-queueSize","()",""],["randGenerator","RandomPic","RandomPic.html#method-i-randGenerator","(dimension)","<p>Create boolean matrix with the dimension given\n<p><strong>Returns</strong> :\n\n<p>boolean matrix\n"],["raz","Chronometre","Chronometre.html#method-i-raz","()","<p>Remet le chronomètre à zéro.\n"],["realLast","GridUi","GridUi.html#method-i-realLast","()","<p>Compute the real last cell of the selection @return CellUi\n"],["redo","Guess","Guess.html#method-i-redo","(game)","<p>Redo the last Move did in this Guess\n<p><strong>Arguments</strong> :\n<p><code>game</code>     -&gt; The game\n"],["redo","Moves","Moves.html#method-i-redo","(game)","<p>redo the last undo Move (i.e replay it on the given game) and push it on\nundo stack\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; …\n"],["removeChild","ClueUi","ClueUi.html#method-i-removeChild","()",""],["removeGuess","Game","Game.html#method-i-removeGuess","()","<p>Remove the last Guess done\n"],["removeObservator","Observable","Observable.html#method-i-removeObservator","(observator)",""],["remplaceDernier","Classement_gen","Classement_gen.html#method-i-remplaceDernier","(tab, unJoueur)","<p>Replace the last Joueur_score if the Joueur_score in the parameters is 10\nin the mode.\n<p><strong>Arguments</strong> :\n<p><code>unJoueur</code> …\n"],["replay","CellMove","CellMove.html#method-i-replay","(game)","<p>Replay this CellMove on the given game and add it to undo stack\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; The Game to play …\n"],["replay","GuessMove","GuessMove.html#method-i-replay","(game)","<p>Replay this GuessMove on the given game\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; The Game to play on\n"],["replay","Moves","Moves.html#method-i-replay","(game)","<p>Replay each Move on th given Game\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; the game to replay on\n"],["replayWithoutAdd","CellMove","CellMove.html#method-i-replayWithoutAdd","(game)","<p>Replay this CellMove on the given game\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; The Game to play on\n"],["rightClicked","CellUi","CellUi.html#method-i-rightClicked","()","<p>Applies the secondary change on the cell @see Cell\n"],["rightClicked_draged","GridUi","GridUi.html#method-i-rightClicked_draged","()","<p>called when a draged right click occur on the grid\n"],["root?","Guess","Guess.html#method-i-root-3F","()","<p>Returns a boolean indicates if this Guess is the root one (i.e there no\nprevious guess)\n<p><strong>Returns</strong> :\n<p>Boolean …\n"],["rowAt","GridUi","GridUi.html#method-i-rowAt","(ind)",""],["rowSolved?","Game","Game.html#method-i-rowSolved-3F","(rowi)","<p>Returns a boolean indicate if the row at the given index is solved or not\n<p><strong>Arguments</strong> :\n<p><code>rowi</code>     -&gt; The …\n"],["run","Chronometre","Chronometre.html#method-i-run","()","<p>Compte les secondes et met le label référencé à jour\n"],["run","PlayScreen","PlayScreen.html#method-i-run","()","<p>starts the timer\n"],["sameState?","CellUi","CellUi.html#method-i-sameState-3F","(cell)","<p>Checks if the cell in arguments has the same state as self\n<p><strong>Arguments</strong> :\n<p><code>cell</code> -&gt; another CellUi object …\n"],["secondaryChange","Cell","Cell.html#method-i-secondaryChange","()","<p>Apply a secondary change on this Cell (right click)\n<p><strong>Returns</strong> :\n<p>A Boolean, if it&#39;s true, the change had …\n"],["select","CellUi","CellUi.html#method-i-select","()","<p>Changes the appearance of the cell to its selected aspect\n"],["selection","GridUi","GridUi.html#method-i-selection","(cell)","<p>Draws a visual selection for the user\n"],["selectionneurMode","ClassementUi","ClassementUi.html#method-i-selectionneurMode","(tab,unMode)","<p>Select mode from array of Joueur_score.\n<p><strong>Arguments</strong> :\n<p><code>tab</code> -&gt; Array of Joueur_score.\n"],["selectn","ClassementUi","ClassementUi.html#method-i-selectn","(w, z, data,store)",""],["serialize","Move","Move.html#method-i-serialize","()",""],["setClueHighlightColor","Options","Options.html#method-i-setClueHighlightColor","(clueHighlightColor)","<p>Sets the clue highlight color to the given one\n<p><strong>Arguments</strong> :\n<p><code>clueHighlightColor</code>     -&gt; a String respresenting …\n"],["setColor","Options","Options.html#method-i-setColor","(color)","<p>Sets the color to the given one\n<p><strong>Arguments</strong> :\n<p><code>color</code>     -&gt; a String respresenting the color\n"],["setHelpColor","Options","Options.html#method-i-setHelpColor","(helpColor)","<p>Sets the help color to the given one\n<p><strong>Arguments</strong> :\n<p><code>helpColor</code>     -&gt; a String respresenting the help color …\n"],["setLanguage","Options","Options.html#method-i-setLanguage","(language)","<p>Sets the language to the given one\n<p><strong>Arguments</strong> :\n<p><code>language</code>     -&gt; a String respresenting the language\n"],["setNbGrids","Save","Save.html#method-i-setNbGrids","(nbGrids)","<p>Sets the number of won grids\n<p><strong>Arguments</strong> :\n<p><code>nbGrids</code> -&gt; The number of won grids\n"],["setOnClickEvent","MenuItemUi","MenuItemUi.html#method-i-setOnClickEvent","(block)","<p>Sets the “OnClick” event to the given Block\n<p><strong>Arguments</strong> :\n<p><code>block</code>     -&gt; the Block to execute …\n"],["setOnClickEvent","MenuUI","MenuUI.html#method-i-setOnClickEvent","(name, &block)","<p>Sets the “OnClick” event of a MenuItemUi to the given Block\n<p><strong>Arguments</strong> :\n<p><code>name</code>     -&gt; the MenuItemUi …\n"],["setResolution","Options","Options.html#method-i-setResolution","(res)","<p>Sets the resolution to the given one\n<p><strong>Arguments</strong> :\n<p><code>res</code>     -&gt; a String respresenting the resolution\n"],["setup_tree_view","ClassementUi","ClassementUi.html#method-i-setup_tree_view","(treeview)","<p>Setup a GTK treeview with the player informations.\n<p><strong>Arguments</strong> :\n<p><code>treeview</code> -&gt; A Gtk treeview.\n"],["setup_tree_view","SauvegardeUi","SauvegardeUi.html#method-i-setup_tree_view","(treeview)","<p>Setup a GTK treeview with the saves.\n<p><strong>Arguments</strong> :\n<p><code>treeview</code> -&gt; A Gtk treeview.\n"],["show","CellUi","CellUi.html#method-i-show","()","<p>Allows the cell to be seen\n"],["show","ClueLabel","ClueLabel.html#method-i-show","()",""],["show","ClueUi","ClueUi.html#method-i-show","()",""],["show","MenuUI","MenuUI.html#method-i-show","()","<p>Shows all the MenuItemUis\n"],["show","SelectionUi","SelectionUi.html#method-i-show","()",""],["show","TerminalInput","TerminalInput.html#method-i-show","()",""],["show","Widget","Widget.html#method-i-show","()",""],["showGrid","Solver::Solver","Solver/Solver.html#method-i-showGrid","()",""],["showTechniq","PlayScreen","PlayScreen.html#method-i-showTechniq","(tech)","<p>Shows a solving technique\n<p><strong>Arguments</strong> :\n<p><code>tech</code> -&gt; the name of the technique to be displayed\n"],["show_all","AccueilUi","AccueilUi.html#method-i-show_all","()","<p>Shows all main window children\n"],["showingClues","Solver::Axe","Solver/Axe.html#method-i-showingClues","()",""],["size","Solver::Axes","Solver/Axes.html#method-i-size","()",""],["size","Solver::SetQueue","Solver/SetQueue.html#method-i-size","()",""],["slideFromBegin","Solver::Block","Solver/Block.html#method-i-slideFromBegin","(firstPossible)",""],["slideFromBegin","Solver::LastBlock","Solver/LastBlock.html#method-i-slideFromBegin","(firstPossible)",""],["slideFromEnd","Solver::Block","Solver/Block.html#method-i-slideFromEnd","(lastPossible)",""],["slideFromEnd","Solver::FirstBlock","Solver/FirstBlock.html#method-i-slideFromEnd","(lastPossible)",""],["solvable?","Solver::Axe","Solver/Axe.html#method-i-solvable-3F","()",""],["solve","Solver::Axe","Solver/Axe.html#method-i-solve","()","<p>return the indexes of new information\n"],["solve","Solver::Axes","Solver/Axes.html#method-i-solve","()",""],["solve","Solver::Solver","Solver/Solver.html#method-i-solve","()",""],["solved?","Game","Game.html#method-i-solved-3F","()","<p>Returns a boolean indicate if the game is solved\n<p><strong>Returns</strong> :\n<p>Boolean\n"],["solved?","Solver::Axe","Solver/Axe.html#method-i-solved-3F","()","<p>are all the black cells forming a valid solution ?\n"],["solved?","Solver::Axes","Solver/Axes.html#method-i-solved-3F","()",""],["solver_gaps","Solver::Axe","Solver/Axe.html#method-i-solver_gaps","()",""],["solver_intersections","Solver::Axe","Solver/Axe.html#method-i-solver_intersections","()",""],["solver_littleGapsInRange","Solver::Axe","Solver/Axe.html#method-i-solver_littleGapsInRange","()",""],["solver_minMaxPossibleSize","Solver::Axe","Solver/Axe.html#method-i-solver_minMaxPossibleSize","()",""],["start","AccueilUi","AccueilUi.html#method-i-start","()","<p>Starts main loop\n"],["start","ChronoUi","ChronoUi.html#method-i-start","()","<p>starts the timer\n"],["start","Chronometre","Chronometre.html#method-i-start","()","<p>Lance le chronomètre Si le chronomètre est en pause, crée un nouveau thread\net lance la méthode run @see …\n"],["startInfo","Object","Object.html#method-i-startInfo","(rows, cols)","<p>pour avoir toutes les cases que l&#39;on peut noircire sans réfléchir sur\ntoute une grille\n"],["startInfoHuman","Object","Object.html#method-i-startInfoHuman","(rows, cols)",""],["state=","Solver::Cell","Solver/Cell.html#method-i-state-3D","(state)",""],["stop","Chronometre","Chronometre.html#method-i-stop","()","<p>Stoppe le chronomètre Si le chronomètre n&#39;est pas en pause, et join le\nthread du chronomètre avec …\n"],["submit","Options","Options.html#method-i-submit","()","<p>Writes user prefrences into “Preferences.yml”\n"],["sumAt","Object","Object.html#method-i-sumAt","(index)","<p>Returns the sum at the given index\n<p><strong>Arguments</strong> :\n<p><code>index</code>     -&gt; The index of The wanted sum\n"],["supprimer","Sauvegardes","Sauvegardes.html#method-i-supprimer","(unIndex)","<p>Remove a save.\n<p><strong>Arguments</strong> :\n<p><code>unIndex</code> -&gt; Index of the saves in the save array.\n"],["swap","ClueUi","ClueUi.html#method-i-swap","()","<p>def labelText\n"],["toBoolean","Picture","Picture.html#method-i-toBoolean","()","<p>Convert a picture into boolean arrays\n<p><strong>Returns</strong> :\n\n<p>boolean arrays which correspond to black or white pixels …\n"],["to_s","Cell","Cell.html#method-i-to_s","()",""],["to_s","Chronometre","Chronometre.html#method-i-to_s","()","<p>Affichage du temps en human-readable\n"],["to_s","Game","Game.html#method-i-to_s","()",""],["to_s","Grid","Grid.html#method-i-to_s","()",""],["to_s","Guess","Guess.html#method-i-to_s","()",""],["to_s","Joueur_score","Joueur_score.html#method-i-to_s","()","<p>Redefined the to_s methode .\n<p><strong>Returns</strong> : -The player infomation into a string.\n\n"],["to_s","Picture","Picture.html#method-i-to_s","()","<p>Define the way to display a Picture\n"],["to_s","RandomPic","RandomPic.html#method-i-to_s","()","<p>Define the way to display a Picture\n"],["to_s","Solver::Axe","Solver/Axe.html#method-i-to_s","()",""],["to_s","Solver::Block","Solver/Block.html#method-i-to_s","()",""],["to_s","Solver::Blocks","Solver/Blocks.html#method-i-to_s","()",""],["to_s","Solver::Cell","Solver/Cell.html#method-i-to_s","()",""],["to_s","Solver::Solution","Solver/Solution.html#method-i-to_s","()",""],["to_s","Solver::Solver","Solver/Solver.html#method-i-to_s","()",""],["to_solverCell","Cell","Cell.html#method-i-to_solverCell","()","<p>Returns the corresponding Solver::Cell\n<p><strong>Returns</strong> :\n<p>Solver::Cell\n"],["undo","Guess","Guess.html#method-i-undo","(game)","<p>Undo the last Move did in this Guess\n<p><strong>Arguments</strong> :\n<p><code>game</code>     -&gt; The game\n"],["undo","Moves","Moves.html#method-i-undo","(game)","<p>undo the last Move (i.e replay it on the given game) and push it on redo\nstack\n<p><strong>Arguments</strong> :\n<p><code>game</code> -&gt; the …\n"],["uniqify","Solver::Solver","Solver/Solver.html#method-c-uniqify","(rows, cols, strat=StrategieUnifyAnyBlack)",""],["unpause","ChronoUi","ChronoUi.html#method-i-unpause","()","<p>restarts the timer\n"],["unpause","PlayScreen","PlayScreen.html#method-i-unpause","()","<p>Resumes the game. The pause menu is hidden and the grid is displayed in its\nstead\n"],["unselect","CellUi","CellUi.html#method-i-unselect","()",""],["update","GridUi","GridUi.html#method-i-update","(cellsPos)","<p>Updates the grid only at the specified location\n"],["update","Observator","Observator.html#method-i-update","(arr=[])",""],["update","Preview","Preview.html#method-i-update","(row, col, asset)",""],["update","SelectionUi","SelectionUi.html#method-i-update","(newSelection)",""],["updateAll","GridUi","GridUi.html#method-i-updateAll","()",""],["updateGlowingClue","ClueUi","ClueUi.html#method-i-updateGlowingClue","(blocks)",""],["updateGlowingClue","GridUi","GridUi.html#method-i-updateGlowingClue","(row, col)",""],["win?","Game","Game.html#method-i-win-3F","()","<p>Returns a boolean indicate if the game is won or not. If the game is won,\ncall notifyWin\n<p><strong>Returns</strong> :\n<p>Boolean …\n"],["write","Save","Save.html#method-i-write","()","<p>Writes all new informations in this Save file\n"],["README","","README_md.html","","<p>Hanjie\n<p>TODO:\n<p>Dans ./Game/Ui/:\n + le preview\n + surbrillance sur la ligne et la colone\nactuelle\n"],["output","","premices/output_txt.html","","<p>65535\nn…\n"]]}}